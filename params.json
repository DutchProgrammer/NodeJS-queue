{"name":"Nodejs queue","tagline":"Stack functions so they will execute after each other","body":"NodeJS queue manager\r\n=========\r\n\r\nWith this NodeJS module you can stack functions so they will execute after each other.\r\n\r\n  - Stack functions\r\n  - Execute after each other\r\n  - Add your own params to the callBack\r\n  - Can use triggers on every step\r\n\r\nVersion\r\n----\r\n\r\n1.0\r\n\r\nRequirements\r\n----\r\nNo requirements this module is only using native NodeJS modules\r\n\r\n> For the demo i used [NodeJS download] (http://dutchprogrammer.github.io/NodeJS-download/)\r\n\r\nInstallation\r\n--------------\r\n\r\n```sh\r\nmkdir modules\r\ngit clone https://github.com/DutchProgrammer/NodeJS-queue.git ./modules/NodeJS-queue\r\n```\r\n\r\n##### Examples\r\n\r\n\r\n```sh\r\nvar queue       = require('./queue');\r\nvar fs          = require('fs');\r\nvar download    = require('./download');\r\n\r\nvar httpZipFile      = 'http://domain.com/all.csv';\r\nvar localZipFileName = 'all.csv';\r\nvar localZipFile     = './tmp/'+localZipFileName;\r\n\r\n//Available triggers\r\n\r\n//When settings has been set\r\nqueue.on('init', function (settings) {\r\n    console.log(settings);\r\n});\r\n\r\n//When an job has been added\r\nqueue.on('add', function (jobDetails) {\r\n    console.log(jobDetails);\r\n});\r\n\r\n//When an job has executed\r\nqueue.on('jobCallback', function (jobDetails) {\r\n    console.log(jobDetails);\r\n});\r\n\r\n//When the timeout has been triggers for an job\r\nqueue.on('timeout', function (jobDetails) {\r\n    console.log(jobDetails);\r\n});\r\n\r\n//When job has started\r\nqueue.on('run', function (jobDetails) {\r\n    console.log(jobDetails);\r\n});\r\n\r\nfs.exists(localZipFile, function (exists) {\r\n    if (!exists) {\r\n\t\tqueue.add('Downloading '+localZipFile, download.downloadFile, [httpZipFile, localZipFile]);\r\n\t\tqueue.add('Parse '+localZipFile, parseAllProducts, [localZipFile]);\r\n\t\tqueue.run();\r\n\t\treturn;\r\n\t}\r\n\r\n\tfs.stat(localZipFile, function(err, stats) {\r\n\r\n\t\tvar now = (new Date()).getTime()/1000;\r\n\r\n\t\tif (now-(new Date(stats.mtime)).getTime()/1000 > maxFileTime) {\r\n\r\n\t\t\tqueue.add('Downloading '+localZipFile, download.downloadFile, [httpZipFile, localZipFile]);\r\n\t\t\tqueue.add('Parse '+localZipFile, parseAllProducts, [localZipFile]);\r\n\t\t} else {\r\n\t\t\tqueue.add('Parse '+localZipFile, parseAllProducts, [localZipFile]);\r\n\t\t}\r\n\r\n\t\tqueue.run();\r\n\t});\r\n});\r\n\r\nparseAllProducts = function (done, jobName, csvFile) {\r\n\tdone();\r\n\r\n\tfs.readFile(csvFile, function (err, data) {\r\n\t\tif (err) {\r\n\t\t\tconsole.log('parseAllProducts errr: %s '.error, err);\r\n\t\t\tprocess.exit();\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\t//do you thing\r\n\t});\r\n};\r\n```\r\n\r\n\r\nLicense\r\n----\r\n\r\nMIT\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}